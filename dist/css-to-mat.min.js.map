{"version":3,"file":"css-to-mat.min.js","sources":["../src/CssToMatrix.ts"],"sourcesContent":["import { splitComma, splitBracket, splitUnit, splitSpace, isArray } from \"@daybrush/utils\";\nimport { MatrixInfo } from \"./types\";\nimport { calculate, invert, matrix3d, rotateX3d, rotateY3d, rotateZ3d, scale3d, translate3d } from \"@scena/matrix\";\n\nexport function createMatrix() {\n    return [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1,\n    ];\n}\nexport function parseMat(transform: string | string[]): number[] {\n    return toMat(parse(transform));\n}\nexport function getElementMatrix(el: HTMLElement) {\n    return parseMat(getComputedStyle(el).transform!);\n}\nexport function caculateMatrixDist(matrix: number[], pos: number[]) {\n    const res = calculate(matrix, [pos[0], pos[1] || 0, pos[2] || 0, 1], 4);\n    const w = res[3] || 1;\n\n    return [\n        res[0] / w,\n        res[1] / w,\n        res[2] / w,\n    ];\n}\nexport function getDistElementMatrix(el: HTMLElement, container = document.body): number[] {\n    let target: HTMLElement | null = el;\n    let matrix = createMatrix();\n\n    while (target) {\n        const transform = getComputedStyle(target).transform!;\n        matrix = matrix3d(parseMat(transform), matrix);\n\n        if (target === container) {\n            break;\n        }\n        target = target.parentElement;\n    }\n    matrix = invert(matrix, 4);\n\n    matrix[12] = 0;\n    matrix[13] = 0;\n    matrix[14] = 0;\n\n    return matrix;\n}\n\nexport function toMat(matrixInfos: MatrixInfo[]): number[] {\n    let target = createMatrix();\n\n    matrixInfos.forEach(info => {\n        const {\n            matrixFunction,\n            functionValue,\n        } = info;\n\n        if (!matrixFunction) {\n            return;\n        }\n        target = matrixFunction(target, functionValue);\n    });\n    return target;\n}\nexport function parse(transform: string | string[]): MatrixInfo[] {\n    const transforms = isArray(transform) ? transform : splitSpace(transform);\n\n    return transforms.map(t => {\n        const { prefix: name, value } = splitBracket(t);\n\n        let matrixFunction = null;\n        let functionValue: any = \"\";\n\n        if (name === \"translate\" || name === \"translateX\" || name === \"translate3d\") {\n            const [posX, posY = 0, posZ = 0] = splitComma(value!).map(v => parseFloat(v));\n\n            matrixFunction = translate3d;\n            functionValue = [posX, posY, posZ];\n        } else if (name === \"translateY\") {\n            const posY = parseFloat(value!);\n\n            matrixFunction = translate3d;\n            functionValue = [0, posY, 0];\n        } else if (name === \"translateZ\") {\n            const posZ = parseFloat(value!);\n\n            matrixFunction = translate3d;\n            functionValue = [0, 0, posZ];\n        } else if (name === \"scale\" || name === \"scale3d\") {\n            const [sx, sy = sx, sz = 1] = splitComma(value!).map(v => parseFloat(v)) as number[];\n\n            matrixFunction = scale3d;\n            functionValue = [sx, sy, sz];\n        } else if (name === \"scaleX\") {\n            const sx = parseFloat(value!);\n\n            matrixFunction = scale3d;\n            functionValue = [sx, 1, 1];\n        } else if (name === \"scaleY\") {\n            const sy = parseFloat(value!);\n\n            matrixFunction = scale3d;\n            functionValue = [1, sy, 1];\n        } else if (name === \"scaleZ\") {\n            const sz = parseFloat(value!);\n\n            matrixFunction = scale3d;\n            functionValue = [1, 1, sz];\n        } else if (name === \"rotate\" || name === \"rotateZ\" || name === \"rotateX\" || name === \"rotateY\") {\n            const { unit, value: unitValue } = splitUnit(value!);\n            const rad = unit === \"rad\" ? unitValue : unitValue * Math.PI / 180;\n\n            if (name === \"rotate\" || name === \"rotateZ\") {\n                matrixFunction = rotateZ3d;\n            } else if (name === \"rotateX\") {\n                matrixFunction = rotateX3d;\n            } else if (name === \"rotateY\") {\n                matrixFunction = rotateY3d;\n            }\n            functionValue = rad;\n        } else if (name === \"matrix3d\") {\n            matrixFunction = matrix3d;\n            functionValue = splitComma(value!).map(v => parseFloat(v));\n        } else if (name === \"matrix\") {\n            const m = splitComma(value!).map(v => parseFloat(v));\n            matrixFunction = matrix3d;\n            functionValue = [\n                m[0], m[1], 0, 0,\n                m[2], m[3], 0, 0,\n                0, 0, 1, 0,\n                m[4], m[5], 0, 1,\n            ];\n        }\n        return {\n            name: name!,\n            value: value!,\n            matrixFunction,\n            functionValue,\n        };\n    });\n}\n"],"names":["createMatrix","parseMat","transform","toMat","parse","matrixInfos","target","forEach","info","matrixFunction","functionValue","isArray","splitSpace","map","t","_a","name","value","_b","posX","_c","posY","_d","translate3d","parseFloat","_e","sx","_f","sy","_g","scale3d","_h","unit","unitValue","rotateZ3d","rotateX3d","rotateY3d","Math","PI","matrix3d","splitComma","v","m","el","container","document","body","matrix","getComputedStyle","parentElement","invert","pos","res","calculate","w"],"mappings":"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"}